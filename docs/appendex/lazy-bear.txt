lazy-bear

資格勉強を始める前に考えていた計画より、
スムーズに進まなかったことありませんか？

資格取得における現状
今と合格ラインの差分が不明瞭であるため、計画を都度チューニングする必要あり
計画が遅延するごとに、リカバリーと影響範囲を考える必要あり


今
合格ライン
ポケモンの例：
ポケモンを貰った時、いきなり一番高レベルのジムリーダーを倒すために、鍛えてくださいと言われても対策が難しい
間のジムリーダーを倒すというマイルストーンがあって、初めてビジョンが見える

間のジムリーダーもレベルが足りなかったら、寄り道する必要がある

資格取得における課題

計画修正に時間をかける事で、学習可能時間が減少する
修正が手間故に計画を放棄し、闇雲に勉強した結果、点数が上がらないことも
もしくは、資格自体を諦める可能性もある

作ったものの説明

資格取得用ガントチャート作成アプリ

このアプリで解決したい事
今と合格ラインの差分を明確化し、精度の高い計画を作成する
理解の停滞、意図しない予定が入る度に計画を自動で修正する
・精度の高い計画を作成する
・計画修正の手間を最小限にする

実装範囲
資格名・学習方法・学習媒体から自分だけの**ガントチャートを作成してくれる**
今と合格ラインの差分を明確化し、精度の高い計画を作成する

デモ

システム構成

フロントエンド

フロントで工夫したところ
イメージをなるべく早期に具体化する
開始から3, 4日でFigmaのデザイン案を構成。
メンバー全員でイメージを共有することに役立った。

その結果、テーブル設計やフロント・バックで受け渡すリソースを、
大きな認識のずれなく設計することができた。

難しかったところ
ページ作成の方針立てを行えなかった
フロントが初ということもあり、
1ページ全部を一度に作成し、何度もエラーが生じた。

「静的ページ→動的ページ→モック→APIとの接続」の順が良かったかも

バックエンド

Vertex AI呼び出し機能の構成

←DB操作
←プロンプト
生成
←AI呼び出し
メンバー間で同じようにVertexAI呼び出しの実装ができるように工夫

コグニティブ・デザインの導入

コグニティブ・デザインの導入
導入後、レスポンスが安定
したことを実感

ORM（drizzle）の導入
・前回ハッカソンではSQL文を直接実行していた

・drizzleを導入することで、スキーマの定義->DB変更や
型定義を簡単に管理できるようになった
IaC（terraform）の導入
・コードでインフラを定義し、管理

・インフラ担当メンバー以外も、自分のアカウントで
簡単に環境構築ができるように

全体を通して

多様なバックグラウンド故に起きた、認識齟齬の課題
- サイトのコーディングだと作ったらほぼ終わり、あとは調整ということが多いので、バックエンドの作ってからテストするという概念がすっぽり抜けてました。
- デザインをするときに感覚的に守っていることを言語化して伝えることがあまりなかったので上手く出来たか不安だった（デザイナー時代は周りに美術関係の人しか居らず、感覚的に伝えても成果物を見せればそれとなくデザインの意図が伝わってしまうため）。

多様なバックグラウンド故に起きた、認識齟齬の課題
▪️デザインや設計の意図の共有
なぜ、このデザイン・実装にするのかという意図みたいなものを共有することに時間を多めに使った。
▪️ゴール地点のすり合わせ
期間の中でどこまでの機能を実装するか、作業中でも随時すり合わせた。風呂敷を広げる/畳むのバランスが難しかったがなんとかなった

全員が初めて触る技術について、どこまで共有すべきか
- Discord以外にも情報を別でまとめる場があっても良かったかもしれない。他の話題が出ると上に流れていってしまうため。
- でも絶対に共有したいんだったら緊急MTGは正直アリ
- 個人チャットでいきなり電話する（事前に連絡はしようね）
- チャットした後に通話を入れて相手の履歴に残す
- 初回で何をどこで管理するかちゃんと決めておくべきだったか
- githubに集約するべきだったのかな〜
